DAY 1 ====================================================================================================

# Object oriented programming - paradigm centered around objects

# 4 pillars

    # Encapsulation - Reduce complexity/ INcrease reusability
    # Abstraction - Reduce complexity + isolate impact of changes
    # inheritence - Eliminate redundant code
    # polymorphism - Refactor ugly switch/case statements

# the best functions are those with no parameters

# Hot reloading

# properties/ members/ instance variables

# Methods/ functions

# Ways to create Object in javascript

    # Object literal syntax
    # Factory function - If we return an object from a regular function, then it is a factory function.
    # Constructor function - If we use 'this' keyword along with 'new' operator, then it is a constructor function.

# if you forget 'new' then, function would be factory function and properties with 'this' keyword will defined on global object. In modern javascript such action gives error. In traditional js, it used to get defined on window object when 'new' was omitted or forgotten.

# Every object has 'constructor' property, whcih refers to the function that created it.

DAY 2 ====================================================================================================

# bind, call and apply - Allow your object(first parameter) to borrow methods from other objects and invoke them as their own.

# bind polyfill, call polyfill, apply polyfill

# function properties - call, bind, apply, caller, prototype

# arguments - array-ike object, not array

# arguments object has property named 'callee'. Allows the anonymous functions to call recursively.

# Suppose, F is function. It will have a prototype property by default -> it contains an object -> useful only if this function is used as a constructor -> any object created using this constructor function will have access to the properties of "F.prototype -> some_obj", as if it were its own.

# Built-in objects as divided into 3 categories:

        - Data Wrapper objects - Object, Array, Function, Boolean, Number String
        - Utility objects - Math, Date, RegExp
        - Error objects - Error object

# Polyfills: Implementation of features that are given by our browsers, but may not be present in the previous versions of it.
